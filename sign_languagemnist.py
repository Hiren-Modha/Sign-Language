# -*- coding: utf-8 -*-
"""sign languageMNIST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_a5cUr91Ra6ataQNBU90b9jD20NePfyq
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import random
import os

from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelBinarizer

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Conv2D, Dense, Dropout, Flatten, MaxPool2D
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

import kagglehub

# Download latest version
path = kagglehub.dataset_download("datamunge/sign-language-mnist")

print("Path to dataset files:", path)

print(os.listdir(path))

# Instead of trying to list the contents of the CSV file,
# you should read it using pandas' read_csv function.
df_train = pd.read_csv(path + "/sign_mnist_train.csv")
#print(df_train.head()) # Print the first few rows to verify the data is loaded

df_test = pd.read_csv(path + "/sign_mnist_test.csv")
#print(df_test.head())

xTrain = df_train.drop('label', axis=1).values.reshape(-1, 28, 28, 1)
xTest = df_test.drop('label', axis=1).values.reshape(-1, 28, 28, 1)
xTrain = xTrain / 255.0
xTest = xTest / 255.0

yTrain = pd.get_dummies(df_train['label']).values
yTest = pd.get_dummies(df_test['label']).values

print(xTrain.shape)
print(yTrain.shape)
print(xTest.shape)
print(yTest.shape)

dataAugment = ImageDataGenerator(
    rotation_range=5,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.1,
    zoom_range=0.1,
)

xTrain, xVal, yTrain, yVal = train_test_split(
    xTrain,
    yTrain,
    test_size=0.2,
    random_state=42,
)

print(xTrain.shape)
print(yTrain.shape)
print(xVal.shape)
print(yVal.shape)

# Define the model
model = tf.keras.models.Sequential([
    # Input Layer
    tf.keras.layers.Input(shape=(28, 28, 1)),

    # Convolutional Block 1
    tf.keras.layers.Conv2D(32, (3, 3), padding='same', activation='relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Conv2D(32, (3, 3), padding='same', activation='relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Dropout(0.25),

    # Convolutional Block 2
    tf.keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu'),
    tf.keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.MaxPooling2D(strides=(2, 2)),
    tf.keras.layers.Dropout(0.25),

    # Classification Block
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.25),
    tf.keras.layers.Dense(24, activation='softmax')
])


# Compile Model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['acc'])

model.summary()

train_generator = dataAugment.flow(xTrain, yTrain, batch_size=32)
validation_generator = dataAugment.flow(xVal, yVal, batch_size=32)

import os
import cv2
import numpy as np
from PIL import Image  # Importation de PIL pour un redimensionnement plus rapide.



model.evaluate(xTest, yTest)

model.save('/content/drive/MyDrive/Models/hs1.h5', overwrite=True, include_optimizer=True)

from sklearn.metrics import accuracy_score

y_preds = model.predict(xTest)
max_indices = np.argmax(y_preds, axis=1)
y_preds_bool = np.zeros_like(y_preds, dtype=bool)
y_preds_bool[np.arange(y_preds.shape[0]), max_indices] = True

accuracy = accuracy_score(yTest, y_preds_bool)
print(f"Model Accuracy: {accuracy*100:.20f}%")

import matplotlib.pyplot as plt

acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend()
plt.figure()

plt.plot(epochs, loss, 'r', label='Training Loss')
plt.plot(epochs, val_loss, 'b', label='Validation Loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()



import random
import matplotlib.pyplot as plt
import numpy as np

def visualize_predictions(images, labels, model, num_samples=30):
    num_samples = min(num_samples, len(images))

    random_indices = random.sample(range(len(images)), num_samples)

    plt.figure(figsize=(15, 15))
    for i, idx in enumerate(random_indices):
        image = images[idx]
        true_label = int(labels[idx])

        image_reshaped = np.expand_dims(image, axis=0)
        prediction = model.predict(image_reshaped)
        predicted_label = np.argmax(prediction)

        plt.subplot(6, 5, i + 1)
        plt.imshow(image.squeeze(), cmap='gray')
        plt.title(f"{chr(true_label + 65)} / {chr(predicted_label + 65)}")
        plt.axis('off')

    plt.tight_layout()
    plt.show()

testing_labels = np.argmax(yTest, axis=1)
visualize_predictions(xTest, testing_labels, model)